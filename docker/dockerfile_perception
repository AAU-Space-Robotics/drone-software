# Use NVIDIA CUDA base image with Ubuntu 24.04 (Noble)
ARG CUDA_VERSION=12.9.1
ARG UBUNTU_VERSION=24.04
FROM nvidia/cuda:${CUDA_VERSION}-cudnn-devel-ubuntu${UBUNTU_VERSION}

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=jazzy
ENV PYTHONUNBUFFERED=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# Install basic dependencies and set locale
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    wget \
    git \
    python3-pip \
    python3-dev \
    python3-venv \
    build-essential \
    cmake \
    libopenblas-dev \
    liblapack-dev \
    locales \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install ROS2 Jazzy using dynamic ros-apt-source
RUN apt-get update && apt-get install -y curl && \
    ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}') && \
    curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.noble_all.deb" && \
    dpkg -i /tmp/ros2-apt-source.deb && \
    apt-get update && apt-get install -y \
    ros-dev-tools \
    ros-${ROS_DISTRO}-desktop \
    ros-${ROS_DISTRO}-rmw-cyclonedds-cpp \
    ros-${ROS_DISTRO}-cv-bridge \
    ros-${ROS_DISTRO}-sensor-msgs \
    ros-${ROS_DISTRO}-geometry-msgs \
    ros-${ROS_DISTRO}-tf2 \
    ros-${ROS_DISTRO}-tf2-geometry-msgs \
    ros-${ROS_DISTRO}-tf2-ros \
    ros-${ROS_DISTRO}-message-filters \
    python3-rosdep \
    python3-colcon-common-extensions \
    && apt-get upgrade -y && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/ros2-apt-source.deb

# Initialize rosdep
RUN rosdep init && rosdep update

# Install TensorRT
RUN apt-get update && apt-get install -y \
    libnvinfer-dev \
    libnvinfer-plugin-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Create a virtual environment for Python dependencies
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:${PATH}"

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir \
    numpy==1.26.4 \
    opencv-python-headless==4.10.0.84 \
    ultralytics==8.3.6 \
    torch==2.4.1 \
    torchvision==0.19.1 \
    empy==3.3.4 \
    && pip install --no-cache-dir 'transformers>=4.39.0' 'timm>=1.0.7'
RUN pip install --no-cache-dir catkin_pkg lark

# Create ROS2 workspace directory
WORKDIR /ros2_ws/src

COPY src/probe_perception/ probe_perception/ 
COPY src/interfaces/ interfaces/

WORKDIR /ros2_ws 
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && colcon build --packages-select probe_perception interfaces --cmake-args -DBUILD_PROBE_PERCEPTION=ON"

# Entrypoint to source workspace and run the node
CMD ["bash", "-c", "source /opt/ros/${ROS_DISTRO}/setup.bash && source /ros2_ws/install/setup.bash"]