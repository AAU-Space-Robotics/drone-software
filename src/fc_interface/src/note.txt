void execute(const std::shared_ptr<GoalHandleDroneCommand> goal_handle)
    {
        RCLCPP_INFO(this->get_logger(), "Executing command");

        const auto goal = goal_handle->get_goal();
        auto feedback = std::make_shared<DroneCommand::Feedback>();
        auto result = std::make_shared<DroneCommand::Result>();

        // Launch the operation in a separate thread
        std::thread([this, goal, feedback, result, goal_handle]() {
            try
            {
                if (goal->command_type == "arm")
                {
                    RCLCPP_INFO(this->get_logger(), "Arming the drone...");
                    arm(); // Call the void arm function

                    // Start polling for the acknowledgment
                    auto start_time = this->now();
                    bool success = false;

                    while (rclcpp::ok())
                    {
                        // Check the acknowledgment for the arm command
                        DroneCmdAck drone_cmd_ack = Utils.getDroneCmdAck();
                        if (drone_cmd_ack.command == VehicleCommand::VEHICLE_CMD_COMPONENT_ARM_DISARM)
                        {
                            if (drone_cmd_ack.result == 0) // Success
                            {
                                RCLCPP_INFO(this->get_logger(), "Drone armed successfully.");
                                success = true;
                                break;
                            }
                            else if (drone_cmd_ack.result > 0) // Failure
                            {
                                RCLCPP_WARN(this->get_logger(), "Failed to arm drone! Result: %d", drone_cmd_ack.result);
                                success = false;
                                break;
                            }
                        }

                        // Timeout after 5 seconds
                        if ((this->now() - start_time).seconds() > 5.0)
                        {
                            RCLCPP_WARN(this->get_logger(), "Timeout while waiting for arm acknowledgment!");
                            success = false;
                            break;
                        }

                        // Sleep for a short duration before checking again
                        std::this_thread::sleep_for(std::chrono::milliseconds(100));
                    }

                    // Populate the result based on success
                    result->success = success;
                    result->message = success ? "Drone armed successfully." : "Failed to arm the drone.";
                }
                else if (goal->command_type == "disarm")
                {
                    RCLCPP_INFO(this->get_logger(), "Disarming the drone...");
                    disarm(); // Call the disarm function

                    // Assume disarm works similarly
                    result->success = true;
                    result->message = "Drone disarmed successfully.";
                }
                else if (goal->command_type == "goto")
                {
                    RCLCPP_INFO(this->get_logger(), "Navigating to target...");
                    std::vector<double> target_pose = {goal->target_pose[0], goal->target_pose[1], goal->target_pose[2]};
                    double target_yaw = goal->yaw;

                    // Use a placeholder navigate_to_target function for now
                    //bool success = navigate_to_target(target_pose, target_yaw, feedback, goal_handle);

                    result->success = true;
                    result->message = true ? "Navigation complete." : "Navigation failed.";
                }
            }
            catch (const std::exception &e)
            {
                RCLCPP_ERROR(this->get_logger(), "Exception during goal execution: %s", e.what());
                result->success = false;
                result->message = "An error occurred during execution.";
            }

            // Mark goal as succeeded if ROS is still running
            if (rclcpp::ok())
            {
                goal_handle->succeed(result);
                RCLCPP_INFO(this->get_logger(), "Goal execution completed.");
            }
        }).detach(); // Detach the thread to make it run independently
    }